name: Deploy Prompt Management System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          
      - name: Set up test environment
        run: |
          cd backend
          echo "SECRET_KEY='django-test-key-super-secret-123'" > .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=test_db" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "CI=True" >> .env
          
      - name: Run tests
        run: |
          cd backend
          export CI=True
          export SECRET_KEY='django-test-key-super-secret-123'
          export POSTGRES_HOST=localhost
          export POSTGRES_PORT=5432
          export POSTGRES_DB=test_db
          export POSTGRES_USER=postgres
          export POSTGRES_PASSWORD=postgres
          python manage.py test
          
  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Check if required secrets are available
      - name: Check deployment prerequisites
        id: check_deployment
        run: |
          missing=()
          [[ -z "$DOCKER_USERNAME" ]] && missing+=("DOCKER_HUB_USERNAME")
          [[ -z "$DOCKER_PASSWORD" ]] && missing+=("DOCKER_HUB_TOKEN")
          [[ -z "${{ secrets.SERVER_HOST }}" ]] && missing+=("SERVER_HOST")
          [[ -z "${{ secrets.SERVER_USERNAME }}" ]] && missing+=("SERVER_USERNAME")
          [[ -z "${{ secrets.SERVER_SSH_KEY }}" ]] && missing+=("SERVER_SSH_KEY")
          
          if [[ ${#missing[@]} -gt 0 ]]; then
            echo "::warning::Missing secrets: ${missing[*]}"
            echo "can_deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "can_deploy=true" >> $GITHUB_OUTPUT
          
      # Login to Docker Hub
      - name: Login to Docker Hub
        if: steps.check_deployment.outputs.can_deploy == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        if: steps.check_deployment.outputs.can_deploy == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/prompt-manager-backend:latest

      # Debug SSH connectivity
      - name: Debug SSH Connection
        if: steps.check_deployment.outputs.can_deploy == 'true'
        run: |
          echo "Debugging SSH connection..."
          
          # First, check if SSH_KEY_PASSPHRASE is set
          if [[ -z "${{ secrets.SSH_KEY_PASSPHRASE }}" ]]; then
            echo "::warning::SSH key appears to be passphrase protected, but SSH_KEY_PASSPHRASE is not set in secrets"
          fi
          
          # Create SSH key file
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Install sshpass if needed for passphrase
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Try SSH connection with passphrase
          if [[ -n "${{ secrets.SSH_KEY_PASSPHRASE }}" ]]; then
            echo "Testing SSH connection with passphrase..."
            # Using expect script to handle passphrase
            sudo apt-get install -y expect
            
            cat > ssh_test.sh << 'EOF'
            #!/usr/bin/expect -f
            set timeout 30
            set passphrase [lindex $argv 0]
            set host [lindex $argv 1]
            set user [lindex $argv 2]
            
            spawn ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $user@$host "echo 'SSH test with passphrase'"
            expect {
              "Enter passphrase" {
                send "$passphrase\r"
                exp_continue
              }
              eof
            }
            EOF
            
            chmod +x ssh_test.sh
            ./ssh_test.sh "${{ secrets.SSH_KEY_PASSPHRASE }}" "${{ secrets.SERVER_HOST }}" "${{ secrets.SERVER_USERNAME }}" || echo "SSH test with passphrase failed, but continuing workflow"
          else
            # Fallback to regular SSH test
            ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection test'" || echo "SSH test failed, but continuing workflow"
          fi
      
      # Deploy to server
      - name: Deploy to server
        if: steps.check_deployment.outputs.can_deploy == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: |
            echo "SSH connection successful!"
            
            # Verify deployment directory
            DEPLOY_DIR="/root/projects"
            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "Creating deployment directory..."
              mkdir -p "$DEPLOY_DIR"
            fi
            
            cd "$DEPLOY_DIR"
            
            # Pull the latest docker-compose file from your repository
            echo "Downloading docker-compose.yml..."
            wget -q -O docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Create the .env file from secrets
            echo "Creating .env file..."
            mkdir -p backend
            cat > backend/.env << EOL
            # Django environment variables
            SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY || 'django-insecure-default-key-do-not-use-in-production' }}
            DEBUG=${{ secrets.DEBUG || 'False' }}
            
            # Database settings
            POSTGRES_DB=${{ secrets.POSTGRES_DB || 'prompt_db' }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER || 'postgres' }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
            POSTGRES_HOST=db
            POSTGRES_PORT=5432
            
            # Superuser credentials
            DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME || 'admin' }}
            DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL || 'admin@example.com' }}
            DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD || 'admin_password' }}
            EOL
            
            # Pull the latest images and restart the containers
            echo "Pulling and starting Docker containers..."
            docker-compose pull
            docker-compose up -d
            
            echo "Deployment completed successfully!"

      # Alternative SSH deployment method (if the other one fails)
      - name: Manual SSH Deployment
        if: steps.check_deployment.outputs.can_deploy == 'true' && failure()
        run: |
          echo "Attempting alternative SSH deployment due to previous failure..."
          
          # Create SSH key file
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Create deploy script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "SSH connection successful!"
          
          # Verify deployment directory
          DEPLOY_DIR="/root/projects"
          if [ ! -d "$DEPLOY_DIR" ]; then
            echo "Creating deployment directory..."
            mkdir -p "$DEPLOY_DIR"
          fi
          
          cd "$DEPLOY_DIR"
          
          # Create the .env file
          echo "Creating .env file..."
          mkdir -p backend
          cat > backend/.env << EOL
          # Django environment variables
          SECRET_KEY=TEMPLATE_SECRET_KEY
          DEBUG=False
          
          # Database settings
          POSTGRES_DB=prompt_db
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_HOST=db
          POSTGRES_PORT=5432
          
          # Superuser credentials
          DJANGO_SUPERUSER_USERNAME=admin
          DJANGO_SUPERUSER_EMAIL=admin@example.com
          DJANGO_SUPERUSER_PASSWORD=admin_password
          EOL
          
          echo "Pulling and starting Docker containers..."
          docker-compose pull
          docker-compose up -d
          
          echo "Deployment completed successfully!"
          EOF
          
          # Replace the template values with actual secrets
          sed -i "s/TEMPLATE_SECRET_KEY/${{ secrets.DJANGO_SECRET_KEY || 'django-insecure-default-key-do-not-use-in-production' }}/g" deploy.sh
          
          # Install sshpass for passphrase
          if [[ -n "${{ secrets.SSH_KEY_PASSPHRASE }}" ]]; then
            sudo apt-get update && sudo apt-get install -y sshpass expect
            
            # Using expect script for SCP with passphrase
            cat > scp_script.sh << 'EOF'
            #!/usr/bin/expect -f
            set timeout 30
            set passphrase [lindex $argv 0]
            set host [lindex $argv 1]
            set user [lindex $argv 2]
            
            spawn scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.sh $user@$host:~/deploy.sh
            expect {
              "Enter passphrase" {
                send "$passphrase\r"
                exp_continue
              }
              eof
            }
            
            spawn ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $user@$host "chmod +x ~/deploy.sh && ~/deploy.sh"
            expect {
              "Enter passphrase" {
                send "$passphrase\r"
                exp_continue
              }
              eof
            }
            EOF
            
            chmod +x scp_script.sh
            ./scp_script.sh "${{ secrets.SSH_KEY_PASSPHRASE }}" "${{ secrets.SERVER_HOST }}" "${{ secrets.SERVER_USERNAME }}" || echo "Alternative deployment failed, but continuing workflow"
          else
            # Fallback to regular SCP and SSH
            scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.sh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:~/deploy.sh || echo "SCP failed but continuing"
            ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "chmod +x ~/deploy.sh && ~/deploy.sh" || echo "SSH execution failed but continuing"
          fi 