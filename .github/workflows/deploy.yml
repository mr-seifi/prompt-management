name: Deploy Prompt Management System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          cd backend
          python manage.py test
          
  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/prompt-manager-backend:latest
          
      # Optional: Build frontend when it's ready
      # - name: Build and push frontend image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./frontend
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/prompt-manager-frontend:latest
      
      # Deploy to your server using SSH
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/deployment
            # Pull the latest docker-compose file from your repository
            wget -O docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Create the .env file from secrets
            cat > backend/.env << EOL
            # Django environment variables
            SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DEBUG=${{ secrets.DEBUG }}
            
            # Database settings
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=db
            POSTGRES_PORT=5432
            
            # Superuser credentials
            DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
            DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
            DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
            EOL
            
            # Pull the latest images and restart the containers
            docker-compose pull
            docker-compose up -d 