# Validating workflow syntax
name: Deploy Prompt Management System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USER != '' && secrets.TEST_DB_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD != '' && secrets.TEST_DB_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME != '' && secrets.TEST_DB_NAME || 'test_db' }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          
      - name: Set up test environment
        run: |
          cd backend
          echo "SECRET_KEY='${{ secrets.TEST_SECRET_KEY != '' && secrets.TEST_SECRET_KEY || 'django-test-key-ci-only' }}'" > .env
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=${{ secrets.TEST_DB_NAME != '' && secrets.TEST_DB_NAME || 'test_db' }}" >> .env
          echo "POSTGRES_USER=${{ secrets.TEST_DB_USER != '' && secrets.TEST_DB_USER || 'postgres' }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.TEST_DB_PASSWORD != '' && secrets.TEST_DB_PASSWORD || 'postgres' }}" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "CI=True" >> .env
          
      - name: Run tests
        run: |
          cd backend
          python manage.py test
          
  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Check if required secrets are available
      - name: Check deployment prerequisites
        id: check_deployment
        run: |
          missing=()
          [[ -z "$DOCKER_USERNAME" ]] && missing+=("DOCKER_HUB_USERNAME")
          [[ -z "$DOCKER_PASSWORD" ]] && missing+=("DOCKER_HUB_TOKEN")
          [[ -z "${{ secrets.SERVER_HOST }}" ]] && missing+=("SERVER_HOST")
          [[ -z "${{ secrets.SERVER_USERNAME }}" ]] && missing+=("SERVER_USERNAME")
          [[ -z "${{ secrets.SERVER_PASSWORD }}" ]] && missing+=("SERVER_PASSWORD")
          [[ -z "${{ secrets.DJANGO_SECRET_KEY }}" ]] && missing+=("DJANGO_SECRET_KEY")
          
          if [[ ${#missing[@]} -gt 0 ]]; then
            echo "::warning::Missing secrets: ${missing[*]}"
            echo "can_deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "can_deploy=true" >> $GITHUB_OUTPUT
          
      # Login to Docker Hub
      - name: Login to Docker Hub
        if: steps.check_deployment.outputs.can_deploy == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        if: steps.check_deployment.outputs.can_deploy == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/prompt-manager-backend:latest

      # Debug SSH connectivity
      - name: Debug SSH Connection
        if: steps.check_deployment.outputs.can_deploy == 'true'
        run: |
          echo "Debugging SSH connection..."
          
          # Install sshpass for password authentication
          sudo apt-get update && sudo apt-get install -y sshpass expect
          
          # Try SSH connection with password
          if [[ -n "${{ secrets.SERVER_PASSWORD }}" ]]; then
            echo "Testing SSH connection with password..."
            
            # Create expect script with printf for password authentication
            printf '#!/usr/bin/expect -f\nset timeout 30\nset password [lindex $argv 0]\nset host [lindex $argv 1]\nset user [lindex $argv 2]\n\nspawn ssh -o StrictHostKeyChecking=no $user@$host "echo '"'"'SSH test with password'"'"'"\nexpect "password:"\nsend "$password\\r"\nexpect eof\n' > ssh_test.sh
            
            chmod +x ssh_test.sh
            ./ssh_test.sh "${{ secrets.SERVER_PASSWORD }}" "${{ secrets.SERVER_HOST }}" "${{ secrets.SERVER_USERNAME }}" || echo "SSH test with password failed, but continuing workflow"
          else
            echo "::warning::SERVER_PASSWORD is not set in secrets"
          fi
      
      # Deploy to server
      - name: Deploy to server
        if: steps.check_deployment.outputs.can_deploy == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          envs: DOCKER_HUB_USERNAME,DOCKER_HUB_TOKEN
          env:
            DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
            DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          script: |
            echo "SSH connection successful!"
            
            # Verify deployment directory
            DEPLOY_DIR="/root/projects"
            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "Creating deployment directory..."
              mkdir -p "$DEPLOY_DIR"
            fi
            
            cd "$DEPLOY_DIR"
            
            # Pull the latest docker-compose file from your repository
            echo "Downloading docker-compose.yml..."
            wget -q -O docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Create the .env file from secrets
            echo "Creating .env file..."
            mkdir -p backend
            cat > backend/.env << EOL
            # Django environment variables
            SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DEBUG=${{ secrets.DEBUG }}
            
            # Database settings
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=db
            POSTGRES_PORT=5432
            
            # Superuser credentials
            DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
            DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
            DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
            EOL
            
            # Update docker-compose.yml to use the correct Docker Hub username
            sed -i 's/your-dockerhub-username/'${DOCKER_HUB_USERNAME}'/g' docker-compose.yml
            sed -i 's/${DOCKER_HUB_USERNAME:-your-dockerhub-username}/'${DOCKER_HUB_USERNAME}'/g' docker-compose.yml
            
            # Log in to Docker Hub on the server
            echo "Logging in to Docker Hub..."
            echo "${DOCKER_HUB_TOKEN}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
            
            # Pull the latest images and restart the containers
            echo "Pulling and starting Docker containers..."
            docker-compose pull
            docker-compose up -d
            
            echo "Deployment completed successfully!"

      # Alternative SSH deployment method (if the other one fails)
      - name: Manual SSH Deployment
        if: steps.check_deployment.outputs.can_deploy == 'true' && failure()
        run: |
          echo "Attempting alternative SSH deployment due to previous failure..."
          
          # Install sshpass for password authentication
          sudo apt-get update && sudo apt-get install -y sshpass expect
          
          # Create remotely executed script with env variables passed securely using printf
          printf '#!/bin/bash\nset -e\n\necho "SSH connection successful!"\n\n# Verify deployment directory\nDEPLOY_DIR="/root/projects"\nif [ ! -d "$DEPLOY_DIR" ]; then\n  echo "Creating deployment directory..."\n  mkdir -p "$DEPLOY_DIR"\nfi\n\ncd "$DEPLOY_DIR"\n\n# Create the .env file with secrets\necho "Creating .env file..."\nmkdir -p backend\ncat > backend/.env << EOL\n# Django environment variables\nSECRET_KEY=%s\nDEBUG=%s\n\n# Database settings\nPOSTGRES_DB=%s\nPOSTGRES_USER=%s\nPOSTGRES_PASSWORD=%s\nPOSTGRES_HOST=db\nPOSTGRES_PORT=5432\n\n# Superuser credentials\nDJANGO_SUPERUSER_USERNAME=%s\nDJANGO_SUPERUSER_EMAIL=%s\nDJANGO_SUPERUSER_PASSWORD=%s\nEOL\n\n# Update docker-compose.yml to use the correct Docker Hub username\nsed -i '"'"'s/your-dockerhub-username/%s/g'"'"' docker-compose.yml\nsed -i '"'"'s/\\\${DOCKER_HUB_USERNAME:-your-dockerhub-username}/%s/g'"'"' docker-compose.yml\n\n# Log in to Docker Hub\necho "Logging in to Docker Hub..."\necho "%s" | docker login -u "%s" --password-stdin\n\necho "Pulling and starting Docker containers..."\ndocker-compose pull\ndocker-compose up -d\n\necho "Deployment completed successfully!"\n' \
          "${{ secrets.DJANGO_SECRET_KEY }}" \
          "${{ secrets.DEBUG }}" \
          "${{ secrets.POSTGRES_DB }}" \
          "${{ secrets.POSTGRES_USER }}" \
          "${{ secrets.POSTGRES_PASSWORD }}" \
          "${{ secrets.DJANGO_SUPERUSER_USERNAME }}" \
          "${{ secrets.DJANGO_SUPERUSER_EMAIL }}" \
          "${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" \
          "${{ secrets.DOCKER_HUB_USERNAME }}" \
          "${{ secrets.DOCKER_HUB_USERNAME }}" \
          "${{ secrets.DOCKER_HUB_TOKEN }}" \
          "${{ secrets.DOCKER_HUB_USERNAME }}" > deploy.sh
          
          # Create expect script to send the deployment script and execute it
          printf '#!/usr/bin/expect -f\nset timeout 30\nset password [lindex $argv 0]\nset host [lindex $argv 1]\nset user [lindex $argv 2]\n\n# Copy the script\nspawn scp -o StrictHostKeyChecking=no deploy.sh $user@$host:~/deploy.sh\nexpect "password:"\nsend "$password\\r"\nexpect eof\n\n# Execute the script\nspawn ssh -o StrictHostKeyChecking=no $user@$host "chmod +x ~/deploy.sh && ~/deploy.sh"\nexpect "password:"\nsend "$password\\r"\nexpect eof\n' > scp_script.sh
          
          chmod +x scp_script.sh
          ./scp_script.sh "${{ secrets.SERVER_PASSWORD }}" "${{ secrets.SERVER_HOST }}" "${{ secrets.SERVER_USERNAME }}" || echo "Alternative deployment failed, but continuing workflow"

