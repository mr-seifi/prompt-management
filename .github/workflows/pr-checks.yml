name: Pull Request Checks

on:
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          pip install flake8 black isort
          
      - name: Run linters
        run: |
          cd backend
          # Run flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Run black in check mode
          black --check .
          # Run isort in check mode
          isort --check-only --profile black .
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          pip install coverage
          
      - name: Set up test environment
        run: |
          cd backend
          echo "SECRET_KEY=django-test-key" > .env
          echo "DEBUG=True" >> .env
          echo "POSTGRES_DB=test_db" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          
      - name: Run tests with coverage
        run: |
          cd backend
          coverage run --source='.' manage.py test
          coverage report
          coverage xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: false 